# -*- coding: utf-8 -*-
"""Copy of KNN_diabeteis (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Bp2HDf041Syl5xzwjPWjPREM_6EXaIDl

<h1><center>KNN Classification(CO2)</center></h1> 


Date___________________

AIM:To implement k-NN classification using any standard dataset available in the public domain and find the accuracy of the algorithm.

Algorithm:
Step-1: Load the dataset- diabetes.csv

The dataset used for study is Diabetes Dataset.This dataset is originally from the National Institute of Diabetes and Digestive and Kidney Diseases. The objective is to predict based on diagnostic measurements whether a patient has diabetes.Several constraints were placed on the selection of these instances from a larger database. In particular, all patients here are females at least 21 years old of Pima Indian heritage.

Step 2:Pre process the dataset by replaceing zeros suitable mean values .

step 3:Perform the training and testing dataset splitting

Step 4: Determine the number of neighbours for the traning dataset.

Step-5: Calculate the Euclidean distance of K number of neighbors

Step-6: Take the K nearest neighbors as per the calculated Euclidean distance.

Step-7: Among these k neighbors, count the number of the data points in each category.

Step-8: Assign the new data points to that category for which the number of the neighbor is maximum.

Step-9: Calculate the model performance by creating the confusion matrix using the test data and the predicted output
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import confusion_matrix
from sklearn.metrics import f1_score
from sklearn.metrics import accuracy_score

#Loading the dataset
dataset = pd.read_csv('diabetes.csv')
print(len(dataset))
print(dataset)

#Replace zeroes
zero_not_accepted = ['Glucose', 'BloodPressure', 'SkinThickness', 'BMI', 'Insulin']
for column in zero_not_accepted:
    dataset[column] = dataset[column].replace(0, np.NaN)#pandas function to replace column of zeros with numpy NAN(NO DATA)
    mean = int(dataset[column].mean(skipna=True))#Calculate mean of dataset 
    dataset[column] = dataset[column].replace(np.NaN, mean)#replace mean with Mean value
print(dataset['Insulin'])

# split dataset
X = dataset.iloc[:, 0:8]
y = dataset.iloc[:, 8]
X_train, X_test, y_train, y_test = train_test_split(X, y,random_state=0 ,test_size=0.2)
print(len(X_train))
print(len(y_train))
print(len(X_test))
print(len(y_test))

#Feature scaling
sc_X = StandardScaler()
X_train = sc_X.fit_transform(X_train)
X_test = sc_X.transform(X_test)

#finding K value
import math
math.sqrt(len(y_test))

# Define the model: Init K-NN
classifier = KNeighborsClassifier(n_neighbors=11, p=2,metric='euclidean')

# Fit Model
classifier.fit(X_train, y_train)

print(accuracy_score(y_test,y_pred))

from sklearn.metrics import classification_report, confusion_matrix
print(confusion_matrix(y_test, y_pred))
print(classification_report(y_test, y_pred))

"""Result:
k-NN classification model on diabetes dataset is builded  and the accuracy of the algorithm is determined.
"""

